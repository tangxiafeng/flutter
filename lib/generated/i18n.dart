import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get LoginError => "Login error, please login in!";
  String get account => "Enter your email/mobile";
  String get accountAlreadyExists => "Account already exists";
  String get bluetoothNotOn => "Please go to Settings and turn on the bluetooth.";
  String get cancel => "Cancel";
  String get change => "edit";
  String get changePassword => "Change Password";
  String get chooseDevice => "Choose Device";
  String get closer => "Close to hardware, automatic connection";
  String get confirmTheChange => "Confirm the change";
  String get connect => "Connect";
  String get delete => "Delete";
  String get disconnect => "Disconnect";
  String get editPasswordError => "Edit password error";
  String get editPasswordSuccess => "Edit password success";
  String get email => "Email";
  String get en => "English";
  String get errorPassword => "Please enter the correct account number";
  String get findBackThePassword => "Find back the password";
  String get findPassword => "Retrieve password";
  String get forgotPassword => "forgot password?";
  String get info1 => "1. Before connecting, please make sure the device and cellphone’s bluetooth are both turned on.\n\n";
  String get info2 => "2. Due to the diversity of devices, the connection might be slow or unstable for some of these devices.\n\n";
  String get info3 => "3. Due to the system fault, please disconnect the bluetooth or restart the cellphone and try again.\n\n";
  String get info4 => "4. If the device is not responding after being turned on, please recharge the device.\n\n";
  String get inputCode => "Input verification code";
  String get international => "change to international server";
  String get language => "Language";
  String get loadFinish => "Load finish";
  String get loaded => "Load finished";
  String get loading => "Loading";
  String get local => "change to china server";
  String get login => "Login";
  String get logout => "Logout";
  String get newProjectName => "new project name";
  String get noMore => "Done";
  String get notSupport => "We cannot open this kind of project on the mDesigner pad version.";
  String get ok => "OK";
  String get okay => "Okay, got it!";
  String get password => "Enter your password";
  String get passwordAgain => "Enter your password again";
  String get phone => "Phone";
  String get pleaseInputEmail => "Please input email";
  String get pleaseInputPhone => "Please input phone";
  String get preEmail => "Email: ";
  String get prePassword => "Password: ";
  String get prePhone => "Phone: ";
  String get profile => "Profile";
  String get program => "Start Program";
  String get project => "New Project";
  String get projects => "My Projects";
  String get pullToRefresh => "Pull to refresh";
  String get pushToLoad => "Push to load";
  String get refreshFinish => "Refresh finish";
  String get refreshed => "Refresh finished";
  String get refreshing => "Refreshing...";
  String get regain => "reacquire";
  String get register => "regist new acount";
  String get registerError => "Register error，please register again！";
  String get registerTitle => "Register";
  String get releaseToLoad => "Release to load";
  String get releaseToRefresh => "Release to refresh";
  String get rename => "Rename";
  String get resetPassword => "Reset password";
  String get save => "Save";
  String get sendCode => "Send verification code";
  String get serverError => "Server Error";
  String get setPassword => "Set password";
  String get settings => "Settings";
  String get sharedLoginError => "Login error";
  String get start => "Checking Firmware...";
  String get systemError => "System error";
  String get updateAt => "Update at %T";
  String get verifyErrorCode => "Verify error code";
  String get waiting => "Waitting...";
  String get welcomePrivacy => "agree privacy";
  String get zh => "Chinese";
  String EmailCodeSendToPhone(String phone) => "The email verification code has been sent：$phone";
  String SMSCodeSendToPhone(String phone) => "SMS verification code has been sent：$phone";
  String flashing(String process) => "Flashing...$process%";
  String reacquire(String s) => "reacquire(${s}s)";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get setPassword => "设置密码";
  @override
  String get resetPassword => "设置新密码";
  @override
  String get disconnect => "断开连接";
  @override
  String get projects => "我的项目";
  @override
  String get LoginError => "自动登录失败，请重新登陆!";
  @override
  String get project => "新建项目";
  @override
  String get systemError => "系统错误";
  @override
  String get updateAt => "更新于 %T";
  @override
  String get language => "语言";
  @override
  String get program => "开始编程";
  @override
  String get releaseToLoad => "释放加载";
  @override
  String get loaded => "加载结束";
  @override
  String get password => "请输入密码";
  @override
  String get logout => "退出登录";
  @override
  String get notSupport => "mDesigner pad 版本不支持加载此类项目。";
  @override
  String get pushToLoad => "上拉加载";
  @override
  String get errorPassword => "账号或密码错误";
  @override
  String get international => "切换至国际版";
  @override
  String get registerError => "注册失败，请重新注册！";
  @override
  String get okay => "好, 知道了！";
  @override
  String get settings => "设置";
  @override
  String get verifyErrorCode => "验证码错误";
  @override
  String get chooseDevice => "请选择设备";
  @override
  String get accountAlreadyExists => "账号已存在";
  @override
  String get profile => "我";
  @override
  String get confirmTheChange => "确认修改";
  @override
  String get en => "英文";
  @override
  String get loading => "正在加载";
  @override
  String get zh => "简体中文";
  @override
  String get refreshFinish => "刷新完成";
  @override
  String get phone => "手机号";
  @override
  String get findPassword => "找回密码";
  @override
  String get findBackThePassword => "找回密码";
  @override
  String get passwordAgain => "请再次输入密码";
  @override
  String get info1 => "1、连接前请先检查手机蓝牙是否开启，设备上的开关是否打开。\n\n";
  @override
  String get info4 => "4、如果设备开关打开后没有任何反应，请及时充电。\n\n";
  @override
  String get welcomePrivacy => "登录则表示您同意服务条款";
  @override
  String get info3 => "3、有时因一些系统问题，可能要断开蓝牙或重启一下手机再使用。\n\n";
  @override
  String get editPasswordSuccess => "修改密码成功";
  @override
  String get info2 => "2、由于设备的多样性，有些设备的连接可能会相对比较慢或偶尔不稳定，如果连接失败，可重启手机蓝牙或设备，再试一次。\n\n";
  @override
  String get noMore => "完成";
  @override
  String get waiting => "请稍后...";
  @override
  String get sendCode => "发送验证码";
  @override
  String get save => "保存";
  @override
  String get login => "登录";
  @override
  String get delete => "删除";
  @override
  String get local => "切换至中国版";
  @override
  String get loadFinish => "加载完成";
  @override
  String get forgotPassword => "忘记密码？";
  @override
  String get editPasswordError => "修改密码失败";
  @override
  String get sharedLoginError => "登陆失败";
  @override
  String get releaseToRefresh => "释放刷新";
  @override
  String get preEmail => "邮箱: ";
  @override
  String get serverError => "服务器错误";
  @override
  String get ok => "确定";
  @override
  String get email => "邮箱";
  @override
  String get connect => "立即连接";
  @override
  String get pleaseInputPhone => "请输入手机号";
  @override
  String get inputCode => "输入验证码";
  @override
  String get refreshed => "刷新结束";
  @override
  String get change => "修改";
  @override
  String get pullToRefresh => "下拉刷新";
  @override
  String get start => "正在检查固件版本...";
  @override
  String get pleaseInputEmail => "请输入邮箱";
  @override
  String get changePassword => "设置新密码";
  @override
  String get closer => "靠近硬件，自动连接";
  @override
  String get prePhone => "手机: ";
  @override
  String get registerTitle => "注册";
  @override
  String get rename => "重命名";
  @override
  String get refreshing => "正在刷新...";
  @override
  String get newProjectName => "新项目名称";
  @override
  String get prePassword => "密码: ";
  @override
  String get regain => "重新发送";
  @override
  String get bluetoothNotOn => "请先打开蓝牙开关";
  @override
  String get account => "请输入邮箱/手机号";
  @override
  String get register => "注册新账号";
  @override
  String flashing(String process) => "烧录固件中...$process%";
  @override
  String reacquire(String s) => "重新发送(${s}s)";
  @override
  String EmailCodeSendToPhone(String phone) => "邮箱验证码已发送：$phone";
  @override
  String SMSCodeSendToPhone(String phone) => "短信验证码已发送：$phone";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported);
    };
  }

  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported) {
    if (locale == null || !isSupported(locale)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh_CN":
          return SynchronousFuture<S>(const $zh_CN());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) =>
    locale != null && supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
